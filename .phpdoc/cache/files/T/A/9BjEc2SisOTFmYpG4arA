1712175306
waR3U4bTeM%3Aca2b843ca5140dc4e055e1f89f3e6ac9-7194983128dc07cd06b2d288392a1334
s:7992:"TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlIjoxNDp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBkb2NCbG9jayI7TjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGhhc2giO3M6MzI6IjcxOTQ5ODMxMjhkYzA3Y2QwNmIyZDI4ODM5MmExMzM0IjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG5hbWUiO3M6MTA6InBhaW5lbC5waHAiO3M6Mzk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAcGF0aCI7czoxMDoicGFpbmVsLnBocCI7czo0MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBzb3VyY2UiO3M6NTEwNToiPD9waHANCg0Kc2Vzc2lvbl9zdGFydCgpOw0KDQoNCmlmKCghaXNzZXQoJF9TRVNTSU9OWydlbWFpbCddKSA9PSB0cnVlKSBhbmQgKCFpc3NldCgkX1NFU1NJT05bJ3NlbmhhJ10pID09IHRydWUpKXsNCg0KICAgIHVuc2V0KCRfU0VTU0lPTlsnZW1haWwnXSk7DQogICAgdW5zZXQoJF9TRVNTSU9OWydzZW5oYSddKTsNCiAgICBoZWFkZXIoJ0xvY2F0aW9uOiBsb2dpbi5waHAnKTsNCn0NCg0KDQogJGxvZ2FkbyA9ICRfU0VTU0lPTlsnZW1haWwnXTsNCg0KDQoNCg0KPz4NCg0KDQo8P3BocA0KLy9jaGVjYW1vcyBzZSBhIHbDoXJpdmVsIEdFVCh1cmwpIGV4aXN0ZQ0KICAgIGlmKCBpc3NldCggJF9HRVRbJ29wJ10pICkNCiAgICB7DQogICAgICAgIC8vaWYoICRfR0VUWydvcCddID09IDEgKSB7fQ0KICAgICAgICBzd2l0Y2goICRfR0VUWydvcCddICkNCiAgICAgICAgew0KICAgICAgICAgICAgY2FzZSAiMSIgOg0KICAgICAgICAgICAgICAgICRhcnF1aXZvID0gIi4vYXBwL2Jhbm5lcnMucGhwIjsNCiAgICAgICAgICAgIGJyZWFrOw0KDQogICAgICAgICAgICBjYXNlICIyIiA6DQogICAgICAgICAgICAgICAgJGFycXVpdm8gPSAiLi9hcHAvdXN1YXJpb3MucGhwIjsNCiAgICAgICAgICAgIGJyZWFrOw0KDQogICAgICAgICAgICBjYXNlICIzIiA6DQogICAgICAgICAgICAgICAgJGFycXVpdm8gPSAiLi9hcHAvcHVibGljYWNvZXMucGhwIjsNCiAgICAgICAgICAgIGJyZWFrOw0KDQogICAgICAgICAgICBjYXNlICI0IiA6DQogICAgICAgICAgICAgICAgJGFycXVpdm8gPSAiLi9hcHAvc2Fpci5waHAiOw0KICAgICAgICAgICAgYnJlYWs7DQogICAgDQogICAgICAgICAgICBjYXNlICI1IjoNCiAgICAgICAgICAgICAgICAkYXJxdWl2byA9ICIuL2FwcC9mb3Rvc192aWRlb3MucGhwIjsNCiAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICB9DQogICAgfQ0KDQoNCiAgICBpZiggaXNzZXQoICRfR0VUWydlcnJvJ10gKSApDQogICAgew0KICAgICAgICAkdGV4dG9NZW5zYWdlbSA9IFsgIkVycm86IiwgIlByb2JsZW1hIGFvIHJlYWxpemFyIGEgb3BlcmHDp8Ojby4iXTsNCiAgICAgICAgDQogICAgICAgIC8vIE1vc3RyYW1vcyBhIG1lbnNhZ2VtIHVzYW5kbyBKcw0KICAgICAgICBlY2hvICc8c2NyaXB0IGRlZmVyID4NCiAgICAgICAgICAgIC8vIHPDsyBkaXNwYXJhciBhbyBjYXJyZWdhciB0b2RvIG8gSFRNTA0KICAgICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigiRE9NQ29udGVudExvYWRlZCIsIGZ1bmN0aW9uKGUpIA0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIi5hbGVydCIpLnNldEF0dHJpYnV0ZSggImNsYXNzIiwiYWxlcnQgYWxlcnQtZGFuZ2VyIGFsZXJ0LWRpc21pc3NpYmxlIGZhZGUgc2hvdyIgKTsNCg0KICAgICAgICAgICAgICAgIC8vIHBlcm1hbmVjZSBhYmVydG8gcG9yIDNzDQogICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpew0KDQogICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIi5hbGVydCIpLnNldEF0dHJpYnV0ZSggImNsYXNzIiwiYWxlcnQgYWxlcnQtZGFuZ2VyIGFsZXJ0LWRpc21pc3NpYmxlIGZhZGUgaGlkZSIgKTsNCg0KICAgICAgICAgICAgICAgIH0sMzAwMCk7DQogICAgICAgICAgICB9KTsNCiAgICAgICAgPC9zY3JpcHQ+JzsNCiAgICB9DQogICAgDQogICAgaWYoIGlzc2V0KCAkX0dFVFsnb2snXSApICkNCiAgICB7DQogICAgICAgICR0ZXh0b01lbnNhZ2VtID0gWyAiT0shOiIsICJPcGVyYcOnw6NvIHJlYWxpemFkYSBjb20gc3VjZXNzby4iXTsNCiAgICAgICAgDQogICAgICAgIC8vIE1vc3RyYW1vcyBhIG1lbnNhZ2VtIHVzYW5kbyBKcw0KICAgICAgICBlY2hvICc8c2NyaXB0IGRlZmVyID4NCiAgICAgICAgICAgIC8vIHPDsyBkaXNwYXJhciBhbyBjYXJyZWdhciB0b2RvIG8gSFRNTA0KICAgICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigiRE9NQ29udGVudExvYWRlZCIsIGZ1bmN0aW9uKGUpIA0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIi5hbGVydCIpLnNldEF0dHJpYnV0ZSggImNsYXNzIiwiYWxlcnQgYWxlcnQtc3VjY2VzcyBhbGVydC1kaXNtaXNzaWJsZSBmYWRlIHNob3ciICk7DQoNCiAgICAgICAgICAgICAgICAvLyBwZXJtYW5lY2UgYWJlcnRvIHBvciAzcw0KICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXsNCiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcigiLmFsZXJ0Iikuc2V0QXR0cmlidXRlKCAiY2xhc3MiLCJhbGVydCBhbGVydC1zdWNjZXNzIGFsZXJ0LWRpc21pc3NpYmxlIGZhZGUgaGlkZSIgKTsNCiAgICAgICAgICAgICAgICB9LCAzMDAwKTsNCiAgICAgICAgICAgIH0pOw0KICAgICAgICA8L3NjcmlwdD4nOw0KICAgIH0NCg0KPz4NCjwhRE9DVFlQRSBodG1sPg0KPGh0bWwgbGFuZz0icHQtYnIiPg0KPGhlYWQ+DQogICAgPG1ldGEgY2hhcnNldD0iVVRGLTgiPg0KICAgIDx0aXRsZT5OQVNBIC0gUGFpbmVsIGRlIGFkbWluaXN0cmHDp8OjbzwvdGl0bGU+DQogICAgPG1ldGEgbmFtZT0iYXV0b3IiIGNvbnRlbnQ9Ikpvw6NvIFZpdG9yLCBOaWNvbGFzIEN1bmhhLCBBZHJpYW5vIEFuZ2lvbGV0dG8gZSBHYWJyaWVsIEFsbWVpZGEiPg0KICAgIDxtZXRhIG5hbWU9ImRlc2NyaXB0aW9uIiBjb250ZW50PSJTaXRlIGNvbSBmZXJyYW1lbnRhcyDDunRlaXMgcGFyYSBvIHRyYWJhbGhvIGRlc2lnbmFkbyI+DQogICAgPG1ldGEgbmFtZT0ia2V5Ym9hcmRzIiBjb250ZW50PSJQcm9qZXRvIGZpbmFsIE5BU0EsIFQ5Miwgd2ViIGRlc2lnbiwgVUMxNiI+DQogICAgPG1ldGEgbmFtZT0idmlld3BvcnQiIGNvbnRlbnQ9IndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xLjAiPg0KDQogICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSIuL3ZlbmRvci9ib290c3RyYXAtNS4wLjItZGlzdC9jc3MvYm9vdHN0cmFwLm1pbi5jc3MiPg0KDQogICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSJodHRwczovL2Nkbi5qc2RlbGl2ci5uZXQvbnBtL2Jvb3RzdHJhcC1pY29uc0AxLjEwLjIvZm9udC9ib290c3RyYXAtaWNvbnMuY3NzIiBpbnRlZ3JpdHk9InNoYTM4NC1iNmxWSyt5Y2krYmZEbWFZMXUwekU4WVlKdDBUWnhMRUFGeVlTTEhJZDR4b1Z2c3JRdTNJTmV2RktvK1hpcjhlIiBjcm9zc29yaWdpbj0iYW5vbnltb3VzIj4NCg0KICAgIDxzY3JpcHQgc3JjPSIuL3ZlbmRvci9ib290c3RyYXAtNS4wLjItZGlzdC9qcy9ib290c3RyYXAubWluLmpzIiBkZWZlciA+PC9zY3JpcHQ+DQoNCiAgICA8c2NyaXB0IHNyYz0iLi92ZW5kb3IvdmFuaWxsYS1tYXNrZXIuanMiIGRlZmVyID48L3NjcmlwdD4NCg0KICAgIDxzdHlsZSB0eXBlPSJ0ZXh0L2NzcyIgPg0KICAgICAgIA0KICAgIG1haW4NCiAgICB7DQogICAgICAgIHdpZHRoOiAxMDB2dzsNCiAgICAgICAgaGVpZ2h0OiAxMDB2aDsNCiAgICB9DQoNCiAgICA8L3N0eWxlPg0KDQo8L2hlYWQ+DQo8Ym9keT4NCg0KICAgIDxkaXYgY2xhc3M9ImFsZXJ0IGFsZXJ0LXdhcm5pbmcgYWxlcnQtZGlzbWlzc2libGUgZmFkZSBoaWRlIiByb2xlPSJhbGVydCIgc3R5bGU9InBvc2l0aW9uOmZpeGVkOyB0b3A6IDA7IGxlZnQ6MDsgd2lkdGg6IDEwMHZ3OyB0ZXh0LWFsaWduOiBjZW50ZXI7ICIgPg0KICAgICAgICA8c3Ryb25nPjw/cGhwIGVjaG8gQCR0ZXh0b01lbnNhZ2VtWzBdOyA/Pjwvc3Ryb25nPiA8P3BocCBlY2hvIEAkdGV4dG9NZW5zYWdlbVsxXTsgPz4NCiAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJidG4tY2xvc2UiIGRhdGEtYnMtZGlzbWlzcz0iYWxlcnQiIGFyaWEtbGFiZWw9IkNsb3NlIj48L2J1dHRvbj4NCiAgICA8L2Rpdj4NCg0KICAgIDxtYWluIGNsYXNzPSJkLWZsZXggYmctbGlnaHQiPg0KICAgICAgICA8bmF2IGNsYXNzPSIgYmctZGFyayBjb2wtMTIgY29sLW1kLTIgcC00IHAtbWQtMiI+DQogICAgICAgICAgICA8YSBjbGFzcz0iIHRleHQtbGlnaHQgdGV4dC1kZWNvcmF0aW9uLW5vbmUgY29sLW1kLTEyIGQtYmxvY2sgcC1tZC0zIGJnLWRhbmdlciBtdC1tZC0yICIgaHJlZj0iP29wPTEiPjxpIGNsYXNzPSJiaSBiaS1pbWFnZXMiPjwvaT4gQmFubmVyczwvYT4NCiAgICAgICAgICAgIDxhIGNsYXNzPSIgdGV4dC1saWdodCB0ZXh0LWRlY29yYXRpb24tbm9uZSBjb2wtbWQtMTIgZC1ibG9jayBwLW1kLTMgYmctZGFuZ2VyIG10LW1kLTIgIiBocmVmPSI/b3A9MiI+PGkgY2xhc3M9ImJpIGJpLXBlb3BsZS1maWxsIj48L2k+IFVzdcOhcmlvczwvYT4NCiAgICAgICAgICAgIDxhIGNsYXNzPSIgdGV4dC1saWdodCB0ZXh0LWRlY29yYXRpb24tbm9uZSBjb2wtbWQtMTIgZC1ibG9jayBwLW1kLTMgYmctZGFuZ2VyIG10LW1kLTIgIiBocmVmPSI/b3A9MyI+PGkgY2xhc3M9ImJpIGJpLWZpbGUtZWFybWFyay1wbHVzIj48L2k+IFB1YmxpY2FyIE5vdMOtY2lhPC9hPg0KICAgICAgICAgICAgPGEgY2xhc3M9IiB0ZXh0LWxpZ2h0IHRleHQtZGVjb3JhdGlvbi1ub25lIGNvbC1tZC0xMiBkLWJsb2NrIHAtbWQtMyBiZy1kYW5nZXIgbXQtbWQtMiAiIGhyZWY9Ij9vcD01Ij48aSBjbGFzcz0iYmkgYmktaW1hZ2VzIj48L2k+IEZvdG9zIGUgVsOtZGVvczwvYT4NCiAgICAgICAgICAgIDxhIGNsYXNzPSIgdGV4dC1saWdodCB0ZXh0LWRlY29yYXRpb24tbm9uZSBjb2wtbWQtMTIgZC1ibG9jayBwLW1kLTMgYmctZGFuZ2VyIG10LW1kLTIgIiBocmVmPSI/b3A9NCI+PGkgY2xhc3M9IiI+PC9pPiBTYWlyIDwvYT4NCiAgICAgICAgPC9uYXY+DQoNCiAgICAgICAgPHNlY3Rpb24gY2xhc3M9ImNvbC0xMiBjb2wtbWQtMTAgcC1tZC00Ij4NCiAgICAgICAgICAgIA0KICAgICAgICAgICAgPD9waHAgDQogICAgICAgICAgICAgICAgaWYoaXNzZXQoJF9HRVRbJ29wJ10pKQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICByZXF1aXJlX29uY2UoJGFycXVpdm8pOw0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgPz4NCg0KICAgICAgICA8L3NlY3Rpb24+DQoNCiAgICA8L21haW4+DQoNCjwvYm9keT4NCjwvaHRtbD4iO3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAbmFtZXNwYWNlcyI7YTowOnt9czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBpbmNsdWRlcyI7YTowOnt9czo0NDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBmdW5jdGlvbnMiO2E6MDp7fXM6NDQ6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAY29uc3RhbnRzIjthOjA6e31zOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGNsYXNzZXMiO2E6MDp7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAaW50ZXJmYWNlcyI7YTowOnt9czo0MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQB0cmFpdHMiO2E6MDp7fXM6NDA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAZW51bXMiO2E6MDp7fXM6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAbWV0YWRhdGEiO2E6MDp7fX0=";